# -*- coding: utf-8 -*-
"""water_rates.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TfbFzSu6fDWg2jU2ZpsXrFupjKWmmSbb
"""

def calculate_cost(city, water_used):
    if city == "Moab":
        if water_used <= 3000:
            return 15.05
        elif water_used <= 10000:
            return 15.05 + water_used * 1.30 / 1000
        elif water_used <= 60000:
            return 15.05 + water_used * 1.74 / 1000
        elif water_used > 60000:
            return 15.05 + water_used * 2.17 / 1000

    elif city == "Denver":
        if water_used <= 15000:
            return 18.4 + water_used * 2.78 / 1000
        elif water_used <= 30000:
            return 18.4 + water_used * 5.00 / 1000
        elif water_used > 30000:
            return 18.4 + water_used * 6.67 / 1000

    elif city == "St George":
        if water_used <= 7000:
            return 22.75 + water_used * 1.30 / 1000
        elif water_used <= 15000:
            return 22.75 + water_used * 1.80 / 1000
        elif water_used <= 22500:
            return 22.75 + water_used * 2.10 / 1000
        elif water_used <= 30000:
            return 22.75 + water_used * 2.40 / 1000
        elif water_used <= 37500:
            return 22.75 + water_used * 2.95 / 1000
        elif water_used <=45000:
            return 22.75 + water_used * 3.60 / 1000
        elif water_used > 45000:
            return 22.75 + water_used * 4.35 / 1000

    elif city == "Logan":
        if water_used <= 10000:
            return 26.86 + water_used * 1.6 / 1000
        elif water_used > 10000:
            return 26.86 + water_used * 2.58 / 1000


    elif city == "American Fork":
        if water_used <= 3000:
            return 16.49
        elif water_used <= 6000:
            return 16.49 + water_used * 3.49 / 1000
        elif water_used <= 9000:
            return 16.49 + water_used * 4.32 / 1000
        elif water_used > 9000:
            return 16.49 + water_used * 5.06 / 1000

    elif city == "Nephi":
        if water_used <= 5000:
            return 24.71 + water_used * 0.62 / 1000
        elif water_used <= 10000:
            return 24.71 + water_used * 0.72 / 1000
        elif water_used <= 15000:
            return 24.71 + water_used * 0.82 / 1000
        elif water_used <= 20000:
            return 24.71 + water_used * 0.93 / 1000
        elif water_used <= 50000:
            return 24.71 + water_used * 1.03 / 1000
        elif water_used <= 1000000:
            return 24.71 + water_used * 1.13 / 1000
        elif water_used <= 5000000:
            return 24.71 + water_used * 0.52 / 1000
        elif water_used > 5000000:
            return 24.71 + water_used * 0.62 / 1000


    elif city == "Cedar City":
        if water_used <= 8000:
            return 17 + water_used * 1 / 1000
        elif water_used <= 20000:
            return 17 + water_used * 1.84 / 1000
        elif water_used <= 35000:
            return 17 + water_used * 3.35 / 1000
        elif water_used > 35000:
            return 17 + water_used * 3.85 / 1000

    elif city == "Tuscon":
        if water_used <= 9300:
            return 20 + water_used * 2.18 / 1000
        elif water_used <= 20000:
            return 20 + water_used * 4.02 / 1000
        elif water_used <= 40000:
            return 20 + water_used * 8.50 / 1000
        elif water_used > 40000:
            return 20 + water_used * 13.01 / 1000

    elif city == "Pocatello":
        if water_used <= 25000:
            return 16 + water_used * 2.93 / 1000
        elif water_used > 25000:
            return 16 + water_used * 3.66 / 1000

    elif city == "Reno":
        if water_used <= 6000:
            return 22 + water_used * 1.97 / 1000
        elif water_used <= 25000:
            return 22 + water_used * 3.18 / 1000
        elif water_used > 25000:
            return 22 + water_used * 3.72 / 1000

    elif city == "Grand Junction":
        if water_used <= 2000:
            return 24.55 + water_used * 3.17 / 1000
        elif water_used <= 10000:
            return 24.55 + water_used * 4.01 / 1000
        elif water_used <= 20000:
            return 24.55 + water_used * 4.75 / 1000
        elif water_used > 20000:
            return 24.55 + water_used * 5.84 / 1000

    elif city== "Santa Fe":
        if water_used <=7000:
          return 18.42 + water_used * 6.06 / 1000
        elif water_used >7000:
          return 18.42 + water_used * 21.72 / 1000

    elif city=="Ogden":
        if water_used <= 6000:
          return 25.84 + water_used * 2.21 /1000
        elif water_used <= 42000:
          return 25.84 + water_used * 3.39 / 1000
        elif water_used <= 84000:
          return 25.84 + water_used * 3.91 / 1000
        elif water_used > 84000:
          return 25.84 + water_used * 4.41 / 1000

    elif city=='Bountiful':
      if water_used <=5000:
        return 22.46
      elif water_used <=70000:
        return 22.46 + water_used * 1.88 / 1000
      elif water_used <=100000:
        return 22.46 + water_used * 2.07 / 1000
      elif water_used <=200000:
        return 22.46 + water_used * 2.26 / 1000
      elif water_used <=400000:
        return 22.46 + water_used * 3 / 1000
      elif water_used >400000:
        return 22.46 + water_used * 5 / 1000

    elif city=='West Valley City':
      if water_used<=7000:
        return 17.49 + 1.59 * water_used / 1000
      elif water_used <= 15000:
        return 17.49 + 2.23 * water_used / 1000
      elif water_used <= 45000:
        return 17.49 + 3.18 * water_used / 1000
      elif water_used > 45000:
        return 17.49 + 4.24 * water_used / 1000

    elif city=='West Jordan':
      if water_used<7000:
        return 15+1.87*water_used / 1000
      if water_used <=17000:
        return 15 + 2.73 * water_used / 1000
      if water_used <=38000:
        return 15 + 4.01 * water_used / 1000
      if water_used > 38000:
        return 15 + 4.88 * water_used / 1000

    elif city=='Layton':
      if water_used <7000:
        return 23.9
      elif water_used <=15000:
        return 23.9 + 2.13 * water_used / 1000
      elif water_used > 15000:
        return 23.9 + 4.32 * water_used / 1000

    elif city=='Sandy':
      if water_used <6000:
        return 26.43 + 1.68 * water_used / 1000
      elif water_used <=25000:
        return 26.43 + 2.37 * water_used / 1000
      elif water_used <=50000:
        return 26.43 + 3.05 * water_used / 1000
      elif water_used <= 75000:
        return 26.43 + 3.91 * water_used / 1000
      elif water_used >75000:
        return 26.43 + 5.2 * water_used / 1000

    elif city=='Farmington':
      if water_used <5000:
        return 23.7
      elif water_used <=10000:
        return 23.7 + 3.3 * water_used / 1000
      elif water_used <=20000:
        return 23.7 + 3.6 * water_used / 1000
      elif water_used > 20000:
        return 23.7 + 4 * water_used / 1000

    elif city=='Price':
      if water_used<10000:
        return 26.72
      elif water_used<=30001:
        return 26.72 + 1.75 * water_used / 1000
      elif water_used<=60001:
        return 26.72 + 2 * water_used / 1000
      elif water_used <=80000:
        return 26.72 + 2.25 * water_used / 1000
      elif water_used >80000:
        return 26.72 + 2.75 * water_used / 1000

    elif city=='Vernal':
      if water_used <=8000:
        return 40.80
      elif water_used >8000:
        return 40.80 + 2.58 * water_used / 1000

    elif city=='Beaver':
      if water_used <=10000:
        return 35
      elif water_used < 15001:
        return 35 + .4 * water_used / 1000
      elif water_used < 30001:
        return 35 + .8 * water_used / 1000
      elif water_used <= 60000:
        return 35 + 1.6 * water_used / 1000
      elif water_used > 60000:
        return 35 + 2.2 * water_used / 1000

    elif city=='Tooele':
      if water_used <= 10000:
        return 10 + .75 * water_used / 1000
      elif water_used <=30000:
        return 10 + 1 * water_used / 1000
      elif water_used <=50000:
        return 10 + 1.25 * water_used / 1000
      elif water_used <=70000:
        return 10 + 1.5 * water_used / 1000
      elif water_used <=90000:
        return 10 + 1.75 * water_used / 1000
      elif water_used >90000:
        return 10 + 2 * water_used / 1000

    else:
        return "City not found"


def main():
    water_used = float(input("Enter the amount of water used (in gallons): "))

    cities = [
        "Moab", "Denver", "St George", "Logan",
        "American Fork", "Nephi", "Cedar City", 'Bountiful','West Valley City','West Jordan','Layton','Sandy','Farmington', "Tuscon",
        "Pocatello", "Reno", "Grand Junction"
    ]

    for city in cities:
        cost = calculate_cost(city, water_used)
        if isinstance(cost, str):
            print(f"City: {city} - {cost}")
        else:
            print(city, "   ", round(cost,2))


if __name__ == "__main__":
    main()

import matplotlib.pyplot as plt

def calculate_costs(water_usage):
    cities = [
        "Moab", "Denver", "St George", "Logan",
        "American Fork", "Nephi", "Cedar City",
        'Bountiful','West Valley City','West Jordan',
        'Layton','Sandy','Price', 'Vernal', 'Beaver', 'Tooele',
        'Farmington',"Tuscon",
        "Pocatello", "Reno", "Grand Junction"
    ]

    city_costs = {city: [] for city in cities}

    for city in cities:
        for usage in water_usage:
            cost = calculate_cost(city, usage)
            city_costs[city].append(cost)

    return city_costs

gallons = []
for i in range(20):
  total = i * 1000
  gallons.append(total)


def plot_comparison(city_costs):
    water_usage = gallons

    plt.figure(figsize=(12, 6))

    for city, costs in city_costs.items():
        plt.plot(water_usage, costs, label=city)

    plt.title('Comparison of Water Charges by City')
    plt.xlabel('Water Usage (gallons)')
    plt.ylabel('Cost ($)')
    plt.legend()
    plt.grid(True)
    plt.show()




def main():
    water_usage = gallons
    city_costs = calculate_costs(water_usage)
    plot_comparison(city_costs)

if __name__ == "__main__":
    main()

def calculate_marginal_rate(city, water_used):
    if city == "Moab":
        if water_used <= 3000:
            return 0
        elif water_used <= 10000:
            return 1.30
        elif water_used <= 60000:
            return 1.74
        else:
            return 2.17

    elif city == "Denver":
        if water_used <= 15000:
            return 2.78
        elif water_used <= 30000:
            return 5.00
        elif water_used > 30000:
            return 6.67

    elif city == "St George":
        if water_used <= 7000:
            return 1.30
        elif water_used <= 15000:
            return 1.80
        elif water_used <= 22500:
            return 2.10
        elif water_used <= 30000:
            return 2.40
        elif water_used <= 37500:
            return 2.95
        elif water_used <=45000:
            return 3.60
        elif water_used > 45000:
            return 4.35

    elif city == "Logan":
        if water_used <= 10000:
            return 1.6
        elif water_used > 10000:
            return 2.58

    elif city == "Cedar Hills":
        if water_used <= 1000:
            return 0
        elif water_used > 1000:
            return 7.2

    elif city == "American Fork":
        if water_used <= 3000:
            return 3.49
        elif water_used <= 6000:
            return 4.32
        elif water_used <= 9000:
            return 5.06
        elif water_used > 9000:
            return 5.06

    elif city == "Nephi":
        if water_used <= 5000:
            return 0.62
        elif water_used <= 10000:
            return 0.72
        elif water_used <= 15000:
            return 0.82
        elif water_used <= 20000:
            return 0.93
        elif water_used <= 50000:
            return 1.03
        elif water_used <= 1000000:
            return 1.13
        elif water_used <= 5000000:
            return 0.52
        elif water_used > 5000000:
            return 0.62

    elif city == "Cedar City":
        if water_used <= 8000:
            return 1
        elif water_used <= 20000:
            return 1.84
        elif water_used <= 35000:
            return 3.35
        elif water_used > 35000:
            return 3.85

    elif city == "Tuscon":
        if water_used <= 9300:
            return 2.18
        elif water_used <= 20000:
            return 4.02
        elif water_used <= 40000:
            return 8.50
        elif water_used > 40000:
            return 13.01

    elif city == "Pocatello":
        if water_used <= 25000:
            return 2.93
        elif water_used > 25000:
            return 3.66

    elif city == "Reno":
        if water_used <= 6000:
            return 1.97
        elif water_used <= 25000:
            return 3.18
        elif water_used > 25000:
            return 3.72

    elif city == "Grand Junction":
        if water_used <= 2000:
            return 3.17
        elif water_used <= 10000:
            return 4.01
        elif water_used <= 20000:
            return 4.75
        elif water_used > 20000:
            return 5.84

    elif city== "Santa Fe":
        if water_used <=7000:
          return 6.06
        elif water_used >7000:
          return 21.72

    elif city=="Ogden":
        if water_used <= 6000:
          return 2.21
        elif water_used <= 42000:
          return 3.39
        elif water_used <= 84000:
          return 3.91
        elif water_used > 84000:
          return 4.41

    elif city=='Bountiful':
      if water_used <=5000:
        return 0
      elif water_used <=70000:
        return 1.88
      elif water_used <=100000:
        return 2.07
      elif water_used <=200000:
        return 2.26
      elif water_used <=400000:
        return 3
      elif water_used >400000:
        return 5

    elif city=='West Valley City':
      if water_used<=7000:
        return 1.59
      elif water_used <= 15000:
        return 2.23
      elif water_used <= 45000:
        return 3.18
      elif water_used > 45000:
        return 4.24

    elif city=='West Jordan':
      if water_used<7000:
        return 1.87
      if water_used <=17000:
        return 2.73
      if water_used <=38000:
        return 4.01
      if water_used > 38000:
        return 4.88

    elif city=='Layton':
      if water_used <7000:
        return 0
      elif water_used <=15000:
        return 2.13
      elif water_used > 15000:
        return 4.32

    elif city=='Sandy':
      if water_used <6000:
        return 1.68
      elif water_used <=25000:
        return 2.37
      elif water_used <=50000:
        return 3.05
      elif water_used <= 75000:
        return 3.91
      elif water_used >75000:
        return 5.2

    elif city=='Farmington':
      if water_used <5000:
        return 0
      elif water_used <=10000:
        return 3.3
      elif water_used <=20000:
        return 3.6
      elif water_used > 20000:
        return 4

    elif city=='Price':
      if water_used<10000:
        return 0
      elif water_used<=30001:
        return 1.75
      elif water_used<=60001:
        return 2
      elif water_used <=80000:
        return 2.25
      elif water_used >80000:
        return 2.75

    elif city=='Vernal':
      if water_used <=8000:
        return 0
      elif water_used > 8000:
        return 2.58

    elif city=='Beaver':
      if water_used <=10000:
        return 0
      elif water_used < 15001:
        return .4
      elif water_used < 30001:
        return .8
      elif water_used <= 60000:
        return 1.6
      elif water_used > 60000:
        return 2.2

    elif city=='Tooele':
      if water_used <= 10000:
        return .75
      elif water_used <=30000:
        return 1
      elif water_used <=50000:
        return 1.25
      elif water_used <=70000:
        return 1.5
      elif water_used <=90000:
        return 1.75
      elif water_used >90000:
        return 2

    else:
        return "City not found"

import matplotlib.pyplot as plt

def calculate_costs_marg(water_usage):
    cities = [
         "Moab", "Denver", "St George", "Logan",
        "American Fork", "Nephi", "Cedar City",
        'Bountiful','West Valley City','West Jordan',
        'Layton','Sandy','Price', 'Vernal', 'Beaver', 'Tooele',
        'Farmington',"Tuscon",
        "Pocatello", "Reno", "Grand Junction"
    ]

    city_costs = {city: [] for city in cities}

    for city in cities:
        for usage in water_usage:
            cost = calculate_marginal_rate(city, usage)
            city_costs[city].append(cost)

    return city_costs

gallons = []
for i in range(50):
    total = i * 1000
    gallons.append(total)


def plot_comparison(city_costs):
    water_usage = gallons

    plt.figure(figsize=(12, 6))

    for city, costs in city_costs.items():
        plt.plot(water_usage, costs)
        plt.text(water_usage[-1], costs[-1], city, fontsize=8, ha='left', va='center')  # Add city label at the end of each line

    plt.title('Comparison of Water Charges by City')
    plt.xlabel('Water Usage (gallons)')
    plt.ylabel('Cost ($)')
    plt.grid(True)
    plt.show()


def main():
    water_usage = gallons
    city_costs = calculate_costs_marg(water_usage)
    plot_comparison(city_costs)

if __name__ == "__main__":
    main()

import pandas as pd

def create_dataframe(city_costs, water_usage):
    df = pd.DataFrame(city_costs)
    df['Water Usage (gallons)'] = water_usage
    df = df.set_index('Water Usage (gallons)')
    return df

def pivot_dataframe(df):
    return df

def export_to_csv(df, filename):
    df.to_csv(filename)

water_usage = gallons
city_costs = calculate_costs_marg(water_usage)
df = pd.DataFrame(city_costs)
df['Water Usage (gallons)'] = water_usage
df = df.set_index('Water Usage (gallons)')
water_usage = gallons
city_costs = calculate_costs_marg(water_usage)
data = create_dataframe(city_costs, water_usage)
data.head()

utah_cities = [
        "Moab", "St George", "Logan",
        "American Fork", "Nephi", "Cedar City",
        'Bountiful','West Valley City','West Jordan',
        'Layton','Sandy','Price', 'Vernal', 'Beaver', 'Tooele'
    ]
rural_cities = [
        "Moab","Nephi",
        'Price', 'Vernal', 'Beaver', 'Tooele'
    ]

df_pivoted = df.reset_index().melt(id_vars='Water Usage (gallons)', var_name='City', value_name='Marginal Rate')

# Add 'utah' column
df_pivoted['utah'] = df_pivoted['City'].apply(lambda x: 1 if x in utah_cities else 0)

# Add 'rural' column
df_pivoted['rural'] = df_pivoted['City'].apply(lambda x: 1 if x in rural_cities else 0)

print(df_pivoted)

# export_to_csv(df_pivoted, "city_water_costs_marg.csv")

water_usage = gallons
city_costs = calculate_costs(water_usage)
df = pd.DataFrame(city_costs)
df['Water Usage (gallons)'] = water_usage
df = df.set_index('Water Usage (gallons)')
water_usage = gallons
city_costs = calculate_costs(water_usage)
data = create_dataframe(city_costs, water_usage)
data.head()

df_pivoted_t = df.reset_index().melt(id_vars='Water Usage (gallons)', var_name='City', value_name='Total')
df_pivoted_t

# Add 'utah' column
df_pivoted_t['utah'] = df_pivoted_t['City'].apply(lambda x: 1 if x in utah_cities else 0)

# Add 'rural' column
df_pivoted_t['rural'] = df_pivoted_t['City'].apply(lambda x: 1 if x in rural_cities else 0)

print(df_pivoted_t)

df_pivoted['Total Cost'] = df_pivoted_t['Total']
df_pivoted

export_to_csv(df_pivoted, "city_water_costs.csv")

